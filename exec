#!/usr/bin/env bash

# Helpers
prog_dir=$(realpath $(dirname "$0"))
. "$prog_dir/lib"

# Options
while getopts "hnd" opt; do
    case "$opt" in
	   h) cat <<EOF
exec - Execute program in a workspace.

USAGE

    exec [-h,-n,-d] WORKSPACE [COMMON...] [-- EXEC...]

OPTIONS

    -h    Show this help text.
    -n    No echo. Don't echo command before execution.
    -d    Dry run, do not execute command.

ARGUMENTS

    WORKSPACE     Name of workspace.
    COMMON...     If provided runs a common operation. Accepted sub commands:
                     
                    pkg PKG
                      Run "xbps-src pkg <PKG>". EXEC... will be passed to 
                      xbps-src. Defaults to "-j\$(nproc)".
                     
                    install PKG
                      Installs an .xbps package file from the workspace's 
                      hostdir/binpkgs directory. EXEC... will be passed to
                      xbps-install. Defaults to empty. 

                    edit [PKG] [FILE]
                      Edit's a package's files using \$EDITOR. If FILE is not 
                      provided defaults to "template". EXEC... will be passed to 
                      the editor before the file path.
    EXEC...       Program and arguments to run.

BEHAVIOR

    Can be used to run common or arbitrary commands in a workspace. 

EXAMPLES

    - List files in workspace "foobar":
      
        exec foobar -- ls

    - Package "curl" in workspace "foobar":

        exec foobar pkg curl

    - Package "curl" for i686 in workspace "foobar":

        exec foobar pkg curl -- -ai686

    - Install package "curl" without prompts in workspace "foobar":

        exec foobar install curl -- -y

    - Edit the "curl" package template in the "foobar" workspace:

        exec foobar edit curl

    - Edit the "curl" package directory from the "foobar" workspace:

        exec foobar edit curl /

EOF
		 exit 0
		 ;;
	   n) opt_no_echo=true ;;
	   d) opt_dry_run=true ;;
	   '?') die "Unknown option" ;;
    esac
done

# Arguments
shift $((OPTIND-1))

workspace=$(resolve_alias "$1")
shift
if [ -z "$workspace" ]; then
    die "WORKSPACE argument required"
fi

# COMMON... + EXEC... argument parsing.
# Checks to see if the next arg is a know COMMON sub-command name. If so it lets
# logic for that COMMON sub-command parse as many arguments as it needs. Each branch
# of the case is responsible for popping off at least one argumet.
#
# common: should be an array of execution arguments. The special string %EXEC...%
# can be used to signify that the contents of the EXEC... argument should be placed
# in that location.
# common_exec_default: If EXEC... is not provided these will be used instead.
# Specific to the COMMON sub-command.
# exec: the EXEC... argument
common=()
common_exec_default=()
exec_params=()
while [ -n "$1" ]; do
    case "$1" in
	   pkg)
		  # Arguments
		  shift
		  pkg="$1"
		  shift
		  if [ -z "$pkg" ]; then
			 die "<PKG> argument required"
		  fi

		  # Construct command
		  common=("./xbps-src" "%EXEC...%" "pkg" "$pkg")
		  common_exec_default=("-j$(nproc)")
		  ;;
	   install)
		  # Arguments
		  shift
		  pkg="$1"
		  shift
		  if [ -z "$pkg" ]; then
			 die "<PKG> argument required"
		  fi

		  # Construct command
		  common=("xbps-install"
				"--repository=$WORKSPACES_DIR/$workspace/hostdir/binpkgs"
				"%EXEC...%"
				"$pkg")
		  common_exec_default=()
		  ;;
	   edit)
		  # Arguments
		  shift
		  
		  if [[ "$1" != "--" ]]; then
			 pkg="$1"
			 shift
		  fi

		  if [[ "$1" != "--" ]]; then
			 file="$1"
			 shift
		  fi

		  # Ensure EDITOR set
		  if [ -z "$EDITOR" ]; then
			 die "\$EDITOR must be set"
		  fi

		  # Construct command
		  edit_path=""
		  if [ -n "$pkg" ]; then
			 if [ -n "$file" ]; then
				edit_path+="srcpkgs/$pkg/$file"
			 else
				edit_path+="srcpkgs/$pkg/template"
			 fi
		  fi

		  common=("$EDITOR" "%EXEC...%")
		  common_exec_default=()

		  if [ -n "$edit_path" ]; then
			 common+=("$edit_path")
		  fi
		  ;;
	   --)
		  # Record that we've seen the seperator dashes so that we can start
		  # adding items to EXEC...
		  sep_dash_occurred=true
		  shift
		  ;&
	   *)
		  if [ -z "$sep_dash_occurred" ]; then
			 die "Two dashes (\"--\") are required to signify the beginning of the EXEC... argument(s) but found \"$1\""
		  fi

		  exec_params+=("$1")
		  shift
		  ;;
    esac
done

# Prepare execution parameters
args=()

# If running common program
if [ -n "$common" ]; then
    # Default EXEC... to common specific default
    if [ -z "$exec_params" ]; then
	   exec_params="$common_exec_default"
    fi

    for arg in ${common[@]}; do
	   # If special substitution string which marks where EXEC... should be
	   # placed in a common command.
	   if [[ "$arg" == "%EXEC...%" ]]; then
		  if [ -n "$exec_params" ]; then
			 for e in ${exec_params[@]}; do
				args+=("$e")
			 done
		  fi
	   else
		  # If regular
		  args+=("$arg")
	   fi
    done
elif [ -n "$exec_params" ]; then
    # If not running common program
    args=${exec_params[@]}
else
    die "Must either specify COMMON... and / or EXEC..."
fi

# Execute
cd "$WORKSPACES_DIR/$workspace"
check "Failed to change to workspaces directory"

if [ -n "$opt_dry_run" ]; then
    if [ -z "$opt_no_echo" ]; then
	   echo "[dry run] cd $WORKSPACES_DIR/$workspace"
	   echo "[dry run] ${args[@]}"
    fi
elif [ -z "$opt_no_echo" ]; then
    echo "+ cd $WORKSPACES_DIR/$workspace"
    echo "+ ${args[@]}"
    exec ${args[@]}
fi
