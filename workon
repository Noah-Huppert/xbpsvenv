#!/usr/bin/env bash

# Helpers
prog_dir=$(realpath $(dirname "$0"))
. "$prog_dir/lib"

# Configuration
GIT_REMOTE_UPSTREAM=git@github.com:void-linux/void-packages.git

# Options
# Default value for commit option is not empty, it's just set after we have a
# git repository cloned down locally to work with.
opt_commit="" 
opt_commit_show=""

opt_remote="$GIT_REMOTE_UPSTREAM"
opt_remote_show="$opt_remote (upstream)"

while getopts "hc:r:p:a:n:" opt; do
    case "$opt" in
	   h) cat <<EOF
workon - Create a new workspace by checking out a variation of the source code.

USAGE

    workon [-p <PR #>,-c <COMMIT>,-r <REMOTE>,-a <ALIAS>,-n <NOTE>]

OPTIONS

    -p <PR #>      Apply a patch from a GitHub pull request.
    -c <COMMIT>    The Git commit to checkout as the base. Defaults to master.
    -r <REMOTE>    The Git remote to fetch from. The official repository can be
                   refered to by the name "upstream". Defaults to "upstream".
    -a <ALIAS>     Alias to set for created workspace. If -p <PR #> is specified
                   this defaults to "pr-<PR #>". Value of "-" means the alias should
                   be empty.
    -n <NOTE>      Note to set for created workspace. If -p <PR #> is specified 
                   this defaults to "PR #<PR #>". Value of "-" means the note should
                   be empty.

BEHAVIOR

    1. If <REMOTE> does not exist locally clone it.
    2. Ensure xbps-src has all bootstrap packages installed and up to date.
    3. Checkout <COMMIT>.
    4. Make a copy of the <REMOTE> git repository directory, this will be used as
       this workspace.
    5. If <PR #> specified download the corresponding GitHub Pull Request patch and
       apply it.
    6. Record any alias or note for the workspace.

EXAMPLES

    - Make a plain new workspace from the official void-packages repository 
      master branch:

        workon

    - Make a plain new workspace with the alias "foobar":

        workon -a foobar

      Then in any command which takes a workspace name "foobar" can be 
      provided instead.

    - Make a new workspace based off of GitHub Pull Request #18693:

        workon -p 18693

      This will automatically set this workspace's alias to "pr-18693".

EOF
		 exit 0
		 ;;
	   p) opt_pr_num="$OPTARG" ;;
	   c) opt_commit="$OPTARG" ;;
	   r)
		  # Allow special aliases to specify common remotes
		  case "$OPTARG" in
			 remote) opt_remote="$GIT_REMOTE_UPSTREAM" ;;
			 *) opt_remote="$OPTARG" ;;
		  esac

		  if [[ "$opt_remote" != "$OPTARG" ]]; then
			 opt_remote_show="$opt_remote ($OPTARG)"
		  else
			 opt_remote_show="$opt_remote"
		  fi
		  ;;
	   a) opt_alias="$OPTARG" ;;
	   n) opt_note="$OPTARG" ;;
	   '?') die "Unknown option" ;;
    esac
done

shift $((OPTIND-1))

# Set default note and alias if working on a PR
if [ -z "$opt_note" ] && [ -n "$opt_pr_num" ]; then
    opt_note="PR #$opt_pr_num"
fi

if [ -z "$opt_alias" ] && [ -n "$opt_pr_num" ]; then
    opt_alias="pr-$opt_pr_num"

    # Try to find a uniq alias for the PR. uniq_attempts cannot go over 100.
    # A value of 200 indicates a unique alias was found.
    uniq_attempts=0
    while [ "$uniq_attempts" -lt 100 ]; do
	   clash=$(resolve_alias "$opt_alias" nodie)
	   if [ -n "$clash" ]; then
		  opt_alias=$(mktemp --dry-run "pr-$opt_pr_num-XXX")
	   else
		  uniq_attempts=200
		  break
	   fi

	   uniq_attempts=$(($uniq_attempts + 1))
    done

    if [ "$uniq_attempts" -ne 200 ]; then
	   die "Failed to find an automatic unique alias for the PR. There are probably a lot of copies of the same PR. Pass -a '-' next time to prevent this."
    fi
fi

# Manage base Git repository for remote
# Replace slashes with dashes so the filesystem doesn't get confused
opt_remote_path=$(echo "$opt_remote" | sed 's![^a-zA-Z0-9]!-!g')
remote_base_dir="$REMOTE_BASES_DIR/$opt_remote_path"
if [ ! -d "$remote_base_dir" ]; then
    # Haven't cloned remote down, clone
    bold "Cloning remote Git repository"
    echo "Remote     : $opt_remote_show"
    echo "Destination: $remote_base_dir"
    
    git clone "$opt_remote" "$remote_base_dir"
    check "Failed to clone Git remote repository $opt_remote_show"

    cd "$remote_base_dir"
    check "Failed to change into Git remote repository directory"

    bold "Bootstrapping xbps-src in new remote Git repository"
    ./xbps-src binary-bootstrap
    check "Failed to bootstrap xbps-src via binary packages"
else
    # Remote exists, update
    bold "Updating remote Git repository"
    echo "Remote   : $opt_remote_show"
    echo "Directory: $remote_base_dir"
    
    cd "$remote_base_dir"
    check "Failed to change into Git remote repository directory"
    
    git pull origin master
    check "Failed to update Git remote repository $opt_remote_show"

    bold "Updating xbps-src bootstrap for remote Git repository"
    ./xbps-src bootstrap-update
    check "Failed to update xbps-src bootstrap"
fi

# Parse commit option now that we have a base repository to work with
if [ -z "$opt_commit" ]; then
    # Default to head
    opt_commit=$(git rev-parse master)
    opt_commit_show="$opt_commit (master)"
else
    raw_opt_commit="$opt_commit"
    opt_commit=$(git rev-parse "$raw_opt_commit")

    if [[ "$opt_commit" != "$raw_opt_commit" ]]; then
	   opt_commit_show="$opt_commit ($raw_opt_commit)"
    else
	   opt_commit_show="$opt_commit"
    fi
fi

# Make copy of remote repository
bold "Copying remote git repository as new workspace"

workspace_dir=$(mktemp --dry-run "$WORKSPACES_DIR/void-packages-XXXXX")
check "Failed to make temporary directory name for workspace"

workspace=$(basename "$workspace_dir")

cleanup_workspace() {
    rm -rf "$workspace_dir"
}
trap cleanup_workspace ERR EXIT

echo "Directory: $workspace_dir"
echo "Remote   : $opt_remote_show"
echo "Commit   : $opt_commit_show"
echo "PR #     : $opt_pr_num"
echo "Alias    : $opt_alias"
echo "Note     : $opt_note"

cp -r "$remote_base_dir" "$workspace_dir"
check "Failed to copy Git remote repository $opt_remote_show to $workspace_dir"

# Checkout commit
cd "$workspace_dir"
check "Failed to change into the workspace's directory"

bold "Checking out specified revision in workspace"
echo "Commit: $opt_commit_show"

git checkout "$opt_commit"
check "Failed to checkout the $opt_commit_show Git commit"

# Apply PR patch
if [ -n "$opt_pr_num" ]; then
    bold "Apply GitHub Pull Request patch"
    echo "Pull Request: $opt_pr_num"
    
    curl -L "https://github.com/void-linux/void-packages/pull/$opt_pr_num.patch" | git apply
    check "Failed to apply the GitHub Pull Request #$opt_pr_num patch"
fi

# Create alias and note
if [ -n "$opt_alias" ]; then
    bold "Setting alias"
    echo "Alias: $opt_alias"
    
    "$prog_dir/alias" "$workspace" "$opt_alias"
    check "Failed to set alias for new workspace"
fi

if [ -n "$opt_note" ]; then
    bold "Setting note"
    echo "Note: $opt_note"
    
    "$prog_dir/note" "$workspace" "$opt_note"
    check "Failed to set note for new workspace"
fi

# Unregister exit trap so workspace won't be deleted when script exits
trap - ERR EXIT

# Notify user of new workspace details
bold "Ready"
echo "Workspace: $workspace"
echo "Alias    : $opt_alias"
echo "Directory: $workspace_dir"
