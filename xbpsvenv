#!/usr/bin/env bash

# Helpers
prog_dir=$(dirname $(realpath "$0"))
. "$prog_dir/lib"

# Load sub-commands
sub_commands_help_f=$(mktemp "$WORKSPACES_DIR/.xbpsvenv-sub-commands-help-XXXX")
check "Failed to create temporary file to generate help output"

rm_sub_commands_help_f() {
    rm -f "$sub_commands_help_f"
}
trap rm_sub_commands_help_f ERR EXIT
sub_commands=()

for f in $(find "$prog_dir" -maxdepth 1 -type f -executable -not -name $(basename "$0") | sort); do
    sub_commands+=($(basename "$f"))
    echo "                 - $($f -h | head -n 1 | sort)" >> "$sub_commands_help_f"
    check "Failed to save \"$f\" sub-command help"
done

# Options
while getopts "h" opt; do
    case "$opt" in
	   h) cat <<EOF
xbpsvenv - Convenient separated void-packages environments.

USAGE

    xbpsvenv [-h] COMMAND [ARGS...]

OPTIONS

    -h    Show this help text.

ARGUMENTS

    COMMAND    Sub-command to run. Can be:
$(cat $sub_commands_help_f)
    ARGS...    Arguments will be passed to the sub-command.

BEHAVIOR

    Executes sub-command.

EOF
		 exit 0
		 ;;
	   '?') die "Unknown option" ;;
    esac
done

# Arguments
shift $((OPTIND-1))

cmd="$1"
shift
if [ -z "$cmd" ]; then
    die "COMMAND argument required"
fi

matched_cmd=""
for subcmd in "${sub_commands[@]}"; do
    if [[ "$subcmd" == "$cmd" ]]; then
	   matched_cmd=true
    fi
done

if [ -z "$matched_cmd" ]; then
    die "Invalid COMMAND argument, must be one of: ${sub_commands[@]}"
fi

exec "$prog_dir/$cmd" "$@"
